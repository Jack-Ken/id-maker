// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: segment.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gid_Ping_FullMethodName      = "/proto.Gid/Ping"
	Gid_GetId_FullMethodName     = "/proto.Gid/GetId"
	Gid_GetSnowId_FullMethodName = "/proto.Gid/GetSnowId"
	Gid_CreateTag_FullMethodName = "/proto.Gid/CreateTag"
)

// GidClient is the client API for Gid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GidClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingReply, error)
	GetId(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IdReply, error)
	GetSnowId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SnowIdReply, error)
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagReply, error)
}

type gidClient struct {
	cc grpc.ClientConnInterface
}

func NewGidClient(cc grpc.ClientConnInterface) GidClient {
	return &gidClient{cc}
}

func (c *gidClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, Gid_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gidClient) GetId(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*IdReply, error) {
	out := new(IdReply)
	err := c.cc.Invoke(ctx, Gid_GetId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gidClient) GetSnowId(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SnowIdReply, error) {
	out := new(SnowIdReply)
	err := c.cc.Invoke(ctx, Gid_GetSnowId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gidClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagReply, error) {
	out := new(CreateTagReply)
	err := c.cc.Invoke(ctx, Gid_CreateTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GidServer is the server API for Gid service.
// All implementations must embed UnimplementedGidServer
// for forward compatibility
type GidServer interface {
	Ping(context.Context, *emptypb.Empty) (*PingReply, error)
	GetId(context.Context, *IdRequest) (*IdReply, error)
	GetSnowId(context.Context, *emptypb.Empty) (*SnowIdReply, error)
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagReply, error)
	mustEmbedUnimplementedGidServer()
}

// UnimplementedGidServer must be embedded to have forward compatible implementations.
type UnimplementedGidServer struct {
}

func (UnimplementedGidServer) Ping(context.Context, *emptypb.Empty) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGidServer) GetId(context.Context, *IdRequest) (*IdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetId not implemented")
}
func (UnimplementedGidServer) GetSnowId(context.Context, *emptypb.Empty) (*SnowIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnowId not implemented")
}
func (UnimplementedGidServer) CreateTag(context.Context, *CreateTagRequest) (*CreateTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedGidServer) mustEmbedUnimplementedGidServer() {}

// UnsafeGidServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GidServer will
// result in compilation errors.
type UnsafeGidServer interface {
	mustEmbedUnimplementedGidServer()
}

func RegisterGidServer(s grpc.ServiceRegistrar, srv GidServer) {
	s.RegisterService(&Gid_ServiceDesc, srv)
}

func _Gid_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GidServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gid_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GidServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gid_GetId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GidServer).GetId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gid_GetId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GidServer).GetId(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gid_GetSnowId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GidServer).GetSnowId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gid_GetSnowId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GidServer).GetSnowId(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gid_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GidServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gid_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GidServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gid_ServiceDesc is the grpc.ServiceDesc for Gid service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gid_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Gid",
	HandlerType: (*GidServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Gid_Ping_Handler,
		},
		{
			MethodName: "GetId",
			Handler:    _Gid_GetId_Handler,
		},
		{
			MethodName: "GetSnowId",
			Handler:    _Gid_GetSnowId_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Gid_CreateTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "segment.proto",
}
